#*****************************************************************************************
# Vivado (TM) v2022.1 (64-bit)
#
# proj_4x2_tt_chris_test.tcl: Tcl script for re-creating project 'top_photon_tt_chris'
#
# Generated by Vivado on Sun Mar 03 12:09:24 -0500 2024
# IP Build 3524634 on Mon Apr 18 20:55:01 MDT 2022
#
# This file contains the Vivado Tcl commands for re-creating the project to the state*
# when this script was generated. In order to re-create the project, please source this
# file in the Vivado Tcl Shell.
#
# * Note that the runs in the created project will be configured the same way as the
#   original project, however they will not be launched automatically. To regenerate the
#   run results please launch the synthesis/implementation runs as needed.
#
#*****************************************************************************************
# NOTE: In order to use this script for source control purposes, please make sure that the
#       following files are added to the source control system:-
#
#
# 
#
#*****************************************************************************************

# Set the reference directory for source file relative paths (by default the value is script directory path)
set origin_dir "."

# Use origin directory path location variable, if specified in the tcl shell
if { [info exists ::origin_dir_loc] } {
  set origin_dir $::origin_dir_loc
}

# Set the project name
set _xil_proj_name_ "top_photon_tt_chris"

# Use project name variable, if specified in the tcl shell
if { [info exists ::user_project_name] } {
  set _xil_proj_name_ $::user_project_name
}

variable script_file
set script_file "proj_4x2_tt_chris.tcl"

# Help information for this script
proc print_help {} {
  variable script_file
  puts "\nDescription:"
  puts "Recreate a Vivado project from this script. The created project will be"
  puts "functionally equivalent to the original project for which this script was"
  puts "generated. The script contains commands for creating a project, filesets,"
  puts "runs, adding/importing sources and setting properties on various objects.\n"
  puts "Syntax:"
  puts "$script_file"
  puts "$script_file -tclargs \[--origin_dir <path>\]"
  puts "$script_file -tclargs \[--project_name <name>\]"
  puts "$script_file -tclargs \[--help\]\n"
  puts "Usage:"
  puts "Name                   Description"
  puts "-------------------------------------------------------------------------"
  puts "\[--origin_dir <path>\]  Determine source file paths wrt this path. Default"
  puts "                       origin_dir path value is \".\", otherwise, the value"
  puts "                       that was set with the \"-paths_relative_to\" switch"
  puts "                       when this script was generated.\n"
  puts "\[--project_name <name>\] Create project with the specified name. Default"
  puts "                       name is the name of the project from where this"
  puts "                       script was generated.\n"
  puts "\[--help\]               Print help information for this script"
  puts "-------------------------------------------------------------------------\n"
  exit 0
}

# Set the directory path for the original project from where this script was exported
set orig_proj_dir "[file normalize "$origin_dir/top_photon_tt_chris"]"

# Create project
create_project ${_xil_proj_name_} ./${_xil_proj_name_} -part xczu49dr-ffvf1760-2-e

# Set the directory path for the new project
set proj_dir [get_property directory [current_project]]

# Set project properties
set obj [current_project]
set_property -name "default_lib" -value "xil_defaultlib" -objects $obj
set_property -name "enable_resource_estimation" -value "0" -objects $obj
set_property -name "enable_vhdl_2008" -value "1" -objects $obj
set_property -name "ip_cache_permissions" -value "read write" -objects $obj
set_property -name "ip_output_repo" -value "$proj_dir/${_xil_proj_name_}.cache/ip" -objects $obj
set_property -name "mem.enable_memory_map_generation" -value "1" -objects $obj
set_property -name "part" -value "xczu49dr-ffvf1760-2-e" -objects $obj
set_property -name "revised_directory_structure" -value "1" -objects $obj
set_property -name "sim.central_dir" -value "$proj_dir/${_xil_proj_name_}.ip_user_files" -objects $obj
set_property -name "sim.ip.auto_export_scripts" -value "1" -objects $obj
set_property -name "simulator_language" -value "Mixed" -objects $obj

# Create 'sources_1' fileset (if not found)
if {[string equal [get_filesets -quiet sources_1] ""]} {
  create_fileset -srcset sources_1
}

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
  [file normalize "${origin_dir}/ip/qick_time_tagger/src"] \
  [file normalize "${origin_dir}/ip/qick_time_tagger/src/fifo"] \
  [file normalize "${origin_dir}/ip/qick_time_tagger/src/headers"] \
  [file normalize "${origin_dir}/ip/qick_time_tagger/src/time_tagger"] \
  [file normalize "${origin_dir}/ip/qick_time_tagger/src/edge_detect/dsp_edge_crossing/dsp_edge_crossing.xci"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/ip/qick_time_tagger/src/headers/cmd_err.svh"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "Verilog Header" -objects $file_obj

# Set 'sources_1' fileset file properties for local files
# None

# Set 'sources_1' fileset properties
set obj [get_filesets sources_1]
set_property -name "top" -value "axi_qick_peripheral" -objects $obj
set_property -name "top_auto_set" -value "0" -objects $obj

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/ip/qick_time_tagger/src/edge_detect/dsp_edge_crossing/dsp_edge_crossing.xci"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/ip/qick_time_tagger/src/edge_detect/dsp_edge_crossing/dsp_edge_crossing.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}

# Set 'sources_1' fileset file properties for local files
# None

# Create 'constrs_1' fileset (if not found)
if {[string equal [get_filesets -quiet constrs_1] ""]} {
  create_fileset -constrset constrs_1
}

# Set 'constrs_1' fileset object
set obj [get_filesets constrs_1]

# Empty (no sources present)

# Set 'constrs_1' fileset properties
set obj [get_filesets constrs_1]
set_property -name "target_part" -value "xczu49dr-ffvf1760-2-e" -objects $obj

# Create 'sim_1' fileset (if not found)
if {[string equal [get_filesets -quiet sim_1] ""]} {
  create_fileset -simset sim_1
}

# Set 'sim_1' fileset object
# set obj [get_filesets sim_1]
# set files [list \
#  [file normalize "${origin_dir}/ip/qick_time_tagger/TB/tb_macros.svh"] \
#  [file normalize "${origin_dir}/ip/qick_time_tagger/TB/tb_qtt_axi.sv"] \
#  [file normalize "${origin_dir}/ip/qick_time_tagger/TB/tb_qtt_periph.sv"] \
#  [file normalize "${origin_dir}/ip/qick_time_tagger/TB/tb_qtt.sv"] \
#  [file normalize "${origin_dir}/ip/qick_time_tagger/TB/tb_qtt_acq_ctrl.sv"] \
#  [file normalize "${origin_dir}/ip/qick_time_tagger/TB/tb_qtt_intf.sv"] \
#  [file normalize "${origin_dir}/ip/qick_time_tagger/TB/tb_periph.sv"] \
#  [file normalize "${origin_dir}/ip/qick_time_tagger/TB/tb_enc.sv"] \
# ]
# add_files -norecurse -fileset $obj $files

# Set 'sim_1' fileset object
set obj [get_filesets sim_1]
set files [list \
  [file normalize "${origin_dir}/ip/qick_time_tagger/TB"] \
  [file normalize "${origin_dir}/ip/qick_time_tagger/TB/axi_mst_0/hdl"] \
  [file normalize "${origin_dir}/ip/qick_time_tagger/TB/axi_mst_0/axi_mst_0.xci"] \
]
add_files -norecurse -fileset $obj $files


# Set 'sim_1' fileset file properties for remote files
set file "$origin_dir/ip/qick_time_tagger/TB/tb_macros.svh"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "Verilog Header" -objects $file_obj

# Set sim_1 fileset file properties for local files
set file "$origin_dir/ip/qick_time_tagger/TB/axi_mst_0/axi_mst_0.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}
set_property -name "used_in" -value "simulation" -objects $file_obj
set_property -name "used_in_implementation" -value "0" -objects $file_obj
set_property -name "used_in_synthesis" -value "0" -objects $file_obj


# Set 'sim_1' fileset properties
set obj [get_filesets sim_1]
set_property -name "top" -value "tb_qtt_axi" -objects $obj
set_property -name "top_auto_set" -value "0" -objects $obj
set_property -name "top_lib" -value "xil_defaultlib" -objects $obj
















































